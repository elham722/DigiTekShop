// <auto-generated />
using System;
using DigiTekShop.Identity.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DigiTekShop.Identity.Migrations
{
    [DbContext(typeof(DigiTekShopIdentityDbContext))]
    partial class DigiTekShopIdentityDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DigiTekShop.Identity.Models.AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("ActorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActorType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("User");

                    b.Property<string>("DeviceId")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsSuccess")
                        .HasColumnType("bit");

                    b.Property<string>("NewValueJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValueJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TargetEntityId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("TargetEntityName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("Action")
                        .HasDatabaseName("IX_AuditLogs_Action");

                    b.HasIndex("ActorId")
                        .HasDatabaseName("IX_AuditLogs_ActorId");

                    b.HasIndex("IsSuccess")
                        .HasDatabaseName("IX_AuditLogs_IsSuccess");

                    b.HasIndex("Severity")
                        .HasDatabaseName("IX_AuditLogs_Severity");

                    b.HasIndex("TargetEntityName")
                        .HasDatabaseName("IX_AuditLogs_TargetEntityName");

                    b.HasIndex("Timestamp")
                        .HasDatabaseName("IX_AuditLogs_Timestamp");

                    b.HasIndex("Action", "Timestamp")
                        .HasDatabaseName("IX_AuditLogs_Action_Timestamp");

                    b.HasIndex("ActorId", "Timestamp")
                        .HasDatabaseName("IX_AuditLogs_ActorId_Timestamp");

                    b.HasIndex("Severity", "IsSuccess", "Timestamp")
                        .HasDatabaseName("IX_AuditLogs_Severity_Success_Timestamp");

                    b.HasIndex("TargetEntityName", "TargetEntityId", "Timestamp")
                        .HasDatabaseName("IX_AuditLogs_Entity_Timestamp");

                    b.ToTable("AuditLogs", (string)null);
                });

            modelBuilder.Entity("DigiTekShop.Identity.Models.LoginAttempt", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AttemptedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(3)")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("LoginNameOrEmail")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("LoginNameOrEmailNormalized")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasComputedColumnSql("LOWER([LoginNameOrEmail])", true);

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IpAddress")
                        .HasDatabaseName("IX_LoginAttempts_IpAddress");

                    b.HasIndex("LoginNameOrEmailNormalized")
                        .HasDatabaseName("IX_LoginAttempts_LoginNameOrEmailNorm")
                        .HasFilter("[LoginNameOrEmail] IS NOT NULL");

                    b.HasIndex("Status", "AttemptedAt")
                        .HasDatabaseName("IX_LoginAttempts_Status_AttemptedAt");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("Status", "AttemptedAt"), new[] { "UserId", "IpAddress" });

                    b.HasIndex("UserId", "AttemptedAt")
                        .HasDatabaseName("IX_LoginAttempts_UserId_AttemptedAt");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("UserId", "AttemptedAt"), new[] { "Status", "IpAddress" });

                    b.HasIndex("IpAddress", "Status", "AttemptedAt")
                        .HasDatabaseName("IX_LoginAttempts_Ip_Status_AttemptedAt");

                    b.ToTable("LoginAttempts", (string)null);
                });

            modelBuilder.Entity("DigiTekShop.Identity.Models.PasswordHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ChangedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_PasswordHistory_UserId");

                    b.HasIndex("UserId", "ChangedAt")
                        .HasDatabaseName("IX_PasswordHistory_User_ChangedAt");

                    b.ToTable("PasswordHistories");
                });

            modelBuilder.Entity("DigiTekShop.Identity.Models.PasswordResetToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AttemptCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastAttemptAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ThrottleUntil")
                        .HasColumnType("datetime2");

                    b.Property<string>("TokenHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("UsedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TokenHash")
                        .IsUnique();

                    b.HasIndex("UserId", "ExpiresAt");

                    b.HasIndex("UserId", "ThrottleUntil")
                        .HasDatabaseName("IX_PasswordResetTokens_User_Throttle");

                    b.HasIndex("UserId", "IsUsed", "ExpiresAt")
                        .HasDatabaseName("IX_PasswordResetTokens_User_Active");

                    b.ToTable("PasswordResetTokens", (string)null);
                });

            modelBuilder.Entity("DigiTekShop.Identity.Models.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Permissions_CreatedAt");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Permissions_IsActive");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Permissions_Name");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("DigiTekShop.Identity.Models.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(3)")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("DeviceId")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2(3)");

                    b.Property<bool>("IsRevoked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsRotated")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUsedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ParentTokenHash")
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ReplacedByTokenHash")
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("RevokedReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("RotatedAt")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("TokenHash")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)");

                    b.Property<int>("UsageCount")
                        .HasColumnType("int");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_RefreshTokens_CreatedAt");

                    b.HasIndex("ExpiresAt")
                        .HasDatabaseName("IX_RefreshTokens_ExpiresAt");

                    b.HasIndex("IsRevoked")
                        .HasDatabaseName("IX_RefreshTokens_IsRevoked");

                    b.HasIndex("ParentTokenHash")
                        .HasDatabaseName("IX_RefreshTokens_ParentTokenHash");

                    b.HasIndex("ReplacedByTokenHash")
                        .HasDatabaseName("IX_RefreshTokens_ReplacedByTokenHash");

                    b.HasIndex("TokenHash")
                        .IsUnique()
                        .HasDatabaseName("IX_RefreshTokens_Token");

                    b.HasIndex("UserId", "IsRevoked", "ExpiresAt")
                        .HasDatabaseName("IX_RefreshTokens_User_Active");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("UserId", "IsRevoked", "ExpiresAt"), new[] { "Id", "TokenHash", "DeviceId", "CreatedAt" });

                    b.HasIndex("UserId", "DeviceId", "IsRevoked", "ExpiresAt")
                        .HasDatabaseName("IX_RefreshTokens_User_Device_Active");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("UserId", "DeviceId", "IsRevoked", "ExpiresAt"), new[] { "Id", "TokenHash", "CreatedAt" });

                    b.ToTable("RefreshTokens", t =>
                        {
                            t.HasCheckConstraint("CK_RefreshTokens_ExpiresAfterCreated", "[ExpiresAt] > [CreatedAt]");

                            t.HasCheckConstraint("CK_RefreshTokens_RotationConsistency", "(([IsRotated] = 0 AND [ReplacedByTokenHash] IS NULL) OR ([IsRotated] = 1 AND [ReplacedByTokenHash] IS NOT NULL))");
                        });
                });

            modelBuilder.Entity("DigiTekShop.Identity.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Roles_CreatedAt");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("DigiTekShop.Identity.Models.RolePermission", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_RolePermissions_CreatedAt");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId", "PermissionId")
                        .IsUnique()
                        .HasDatabaseName("UX_RolePermissions_Role_Permission");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("DigiTekShop.Identity.Models.SecurityEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeviceId")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsResolved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("MetadataJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OccurredAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("ResolutionNotes")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime?>("ResolvedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ResolvedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId")
                        .HasDatabaseName("IX_SecurityEvents_DeviceId");

                    b.HasIndex("IpAddress")
                        .HasDatabaseName("IX_SecurityEvents_IpAddress");

                    b.HasIndex("IsResolved")
                        .HasDatabaseName("IX_SecurityEvents_IsResolved");

                    b.HasIndex("OccurredAt")
                        .HasDatabaseName("IX_SecurityEvents_OccurredAt");

                    b.HasIndex("Type")
                        .HasDatabaseName("IX_SecurityEvents_Type");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_SecurityEvents_UserId");

                    b.HasIndex("IsResolved", "OccurredAt")
                        .HasDatabaseName("IX_SecurityEvents_Unresolved_OccurredAt")
                        .HasFilter("[IsResolved] = 0");

                    b.HasIndex("DeviceId", "Type", "OccurredAt")
                        .HasDatabaseName("IX_SecurityEvents_DeviceId_Type_OccurredAt");

                    b.HasIndex("IpAddress", "Type", "OccurredAt")
                        .HasDatabaseName("IX_SecurityEvents_IpAddress_Type_OccurredAt");

                    b.HasIndex("Type", "IsResolved", "OccurredAt")
                        .HasDatabaseName("IX_SecurityEvents_Type_Resolved_OccurredAt");

                    b.HasIndex("UserId", "Type", "OccurredAt")
                        .HasDatabaseName("IX_SecurityEvents_UserId_Type_OccurredAt");

                    b.ToTable("SecurityEvents", (string)null);
                });

            modelBuilder.Entity("DigiTekShop.Identity.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("GoogleId")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime2(3)");

                    b.Property<DateTime?>("LastPasswordChangeAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MicrosoftId")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TermsAccepted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("IX_Users_CustomerId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("UX_Users_Email_Active")
                        .HasFilter("[IsDeleted] = 0");

                    b.HasIndex("GoogleId")
                        .HasDatabaseName("IX_Users_GoogleId");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Users_IsDeleted");

                    b.HasIndex("MicrosoftId")
                        .HasDatabaseName("IX_Users_MicrosoftId");

                    b.HasIndex("NormalizedEmail")
                        .IsUnique()
                        .HasDatabaseName("UX_Users_NormalizedEmail_Active")
                        .HasFilter("[IsDeleted] = 0");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UX_Users_NormalizedUserName_Active")
                        .HasFilter("[IsDeleted] = 0");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("DigiTekShop.Identity.Models.UserDevice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("DeviceFingerprint")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("DeviceName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsTrusted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("LastLoginAt")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("OperatingSystem")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime?>("TrustExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TrustedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IpAddress")
                        .HasDatabaseName("IX_UserDevices_IpAddress");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_UserDevices_IsActive");

                    b.HasIndex("LastLoginAt")
                        .HasDatabaseName("IX_UserDevices_LastLoginAt");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_UserDevices_UserId");

                    b.HasIndex("UserId", "DeviceFingerprint")
                        .IsUnique()
                        .HasDatabaseName("UX_UserDevices_User_DeviceFingerprint")
                        .HasFilter("[DeviceFingerprint] IS NOT NULL");

                    b.HasIndex("UserId", "IsActive")
                        .HasDatabaseName("IX_UserDevices_User_IsActive");

                    b.HasIndex("UserId", "IsTrusted")
                        .HasDatabaseName("IX_UserDevices_User_IsTrusted");

                    b.ToTable("UserDevices");
                });

            modelBuilder.Entity("DigiTekShop.Identity.Models.UserMfa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Attempts")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsLocked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastVerifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LockedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LockedUntil")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecretKeyEncrypted")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IsEnabled")
                        .HasDatabaseName("IX_UserMfa_IsEnabled");

                    b.HasIndex("IsLocked")
                        .HasDatabaseName("IX_UserMfa_IsLocked");

                    b.HasIndex("LockedUntil")
                        .HasDatabaseName("IX_UserMfa_LockedUntil");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("UX_UserMfa_UserId");

                    b.ToTable("UserMfa", (string)null);
                });

            modelBuilder.Entity("DigiTekShop.Identity.Models.UserPermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsGranted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IsGranted")
                        .HasDatabaseName("IX_UserPermissions_IsGranted");

                    b.HasIndex("PermissionId")
                        .HasDatabaseName("IX_UserPermissions_PermissionId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_UserPermissions_UserId");

                    b.HasIndex("UserId", "PermissionId")
                        .IsUnique()
                        .HasDatabaseName("IX_UserPermissions_UserId_PermissionId");

                    b.ToTable("UserPermissions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("PhoneVerification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Attempts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("CodeHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_PhoneVerifications_CreatedAt");

                    b.HasIndex("ExpiresAt")
                        .HasDatabaseName("IX_PhoneVerifications_ExpiresAt");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_PhoneVerifications_UserId");

                    b.HasIndex("UserId", "CreatedAt")
                        .HasDatabaseName("IX_PhoneVerifications_UserId_CreatedAt");

                    b.HasIndex("UserId", "ExpiresAt")
                        .HasDatabaseName("IX_PhoneVerifications_UserId_ExpiresAt");

                    b.HasIndex("UserId", "IsVerified")
                        .HasDatabaseName("IX_PhoneVerifications_User_IsVerified");

                    b.HasIndex("UserId", "CodeHash", "ExpiresAt")
                        .IsUnique()
                        .HasDatabaseName("UX_PhoneVerifications_User_Code_ExpiresAt");

                    b.ToTable("PhoneVerifications");
                });

            modelBuilder.Entity("DigiTekShop.Identity.Models.PasswordHistory", b =>
                {
                    b.HasOne("DigiTekShop.Identity.Models.User", "User")
                        .WithMany("PasswordHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("DigiTekShop.Identity.Models.PasswordResetToken", b =>
                {
                    b.HasOne("DigiTekShop.Identity.Models.User", "User")
                        .WithMany("PasswordResetTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("DigiTekShop.Identity.Models.RefreshToken", b =>
                {
                    b.HasOne("DigiTekShop.Identity.Models.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("DigiTekShop.Identity.Models.RolePermission", b =>
                {
                    b.HasOne("DigiTekShop.Identity.Models.Permission", "Permission")
                        .WithMany("Roles")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DigiTekShop.Identity.Models.Role", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DigiTekShop.Identity.Models.UserDevice", b =>
                {
                    b.HasOne("DigiTekShop.Identity.Models.User", "User")
                        .WithMany("Devices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("DigiTekShop.Identity.Models.UserMfa", b =>
                {
                    b.HasOne("DigiTekShop.Identity.Models.User", "User")
                        .WithOne("Mfa")
                        .HasForeignKey("DigiTekShop.Identity.Models.UserMfa", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DigiTekShop.Identity.Models.UserPermission", b =>
                {
                    b.HasOne("DigiTekShop.Identity.Models.Permission", "Permission")
                        .WithMany("UserPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DigiTekShop.Identity.Models.User", "User")
                        .WithMany("UserPermissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Permission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("DigiTekShop.Identity.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("DigiTekShop.Identity.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("DigiTekShop.Identity.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("DigiTekShop.Identity.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DigiTekShop.Identity.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("DigiTekShop.Identity.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PhoneVerification", b =>
                {
                    b.HasOne("DigiTekShop.Identity.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DigiTekShop.Identity.Models.Permission", b =>
                {
                    b.Navigation("Roles");

                    b.Navigation("UserPermissions");
                });

            modelBuilder.Entity("DigiTekShop.Identity.Models.Role", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("DigiTekShop.Identity.Models.User", b =>
                {
                    b.Navigation("Devices");

                    b.Navigation("Mfa");

                    b.Navigation("PasswordHistories");

                    b.Navigation("PasswordResetTokens");

                    b.Navigation("RefreshTokens");

                    b.Navigation("UserPermissions");
                });
#pragma warning restore 612, 618
        }
    }
}
